// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  //output   = "../src/generated/prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Company {
  id            String  @id @default(uuid()) @map("_id")
  name          String  @unique
  fantasy_name  String?
  celphone1     String
  celphone2     String?
  email         String
  url_banner    String?
  url_site      String?
  url_facebook  String?
  url_instagram String?
  url_linkedin  String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  company_params   CompanyParams[]
  product_category ProductCategory[]
  sales            Sale[]
  price_tables     PriceTable[]
  products         Product[]
  users            User[]

  @@map("company")
}

enum Environment {
  PRODUCTION
  HOMOLOGATION

  @@map("environment")
}

model CompanyParams {
  id             String       @id @default(uuid()) @map("_id")
  company        Company      @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  company_id     String       @unique
  environment    Environment? @default(value: HOMOLOGATION)
  obs_email      String?
  obs_voucher    String?
  privacy_policy String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("company_params")
}

enum ProductType {
  COMPUTADOR
  NOTEBOOK
  CELULAR
  MOUSE
  TECLADO
  FONE_DE_SOM
  IMPRESSORA
  MONITOR
  PERIFERICO
  USB
  OUTROS

  @@map("product_type")
}

model ProductCategory {
  id             String      @id @default(uuid()) @map("_id")
  company        Company     @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  company_id     String
  product_type   ProductType
  config_type_id String?
  title          String
  description    String
  url_banner     String?
  active         Boolean     @default(true)
  products       Product[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("product_category")
}

model Product {
  id                     String          @id @default(uuid()) @map("_id")
  product_category       ProductCategory @relation(fields: [product_category_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product_category_id    String
  company                Company         @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  company_id             String
  product_type           ProductType
  sku                    String
  title                  String
  subtitle               String
  description            String
  url_banner             String?
  active                 Boolean         @default(true)
  combo                  Boolean?        @default(false)
  amount_min_sale        Int?            @default(1)
  amount_max_sale        Int?            @default(0)
  amount_max_total_diary Int?            @default(0)
  highlighted            Boolean?        @default(false)
  order_on_menu          Int?            @default(0)
  for_sale               Boolean?        @default(true)
  age_group              String?
  promotion              Boolean?        @default(false)

  items                   ProductCombo[]           @relation("Combo")
  config_product_exeption ConfigProductException[]
  total_sale              ProductTotalSales[]
  product_item            ProductCombo[]           @relation("Item")
  sales_item              ItemSales[]
  price_table             ProductPricesTable[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("product")
}

model ItemSales {
  id               String   @id @default(uuid()) @map("_id")
  sales            Sale     @relation(fields: [sale_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sale_id          String
  product          Product  @relation(fields: [product_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  product_id       String
  amount           Int
  unitary_value    Float
  percent_discount Float
  subtotal         Float
  total            Float
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  @@map("item_sales")
}

model ProductCombo {
  id         String  @id @default(uuid()) @map("_id")
  product    Product @relation(name: "Combo", fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product_id String
  item       Product @relation(name: "Item", fields: [item_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  item_id    String
  amount     Int

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([product_id, item_id])
  @@map("product_combo")
}

enum TypeActionExceptionProduct {
  BLOCK
  RELEASE

  @@map("type_action_exception_product")
}

model ConfigProductException {
  id         String                     @id @default(uuid()) @map("_id")
  product    Product                    @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product_id String
  date       DateTime
  action     TypeActionExceptionProduct @default(BLOCK)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([product_id, date])
  @@map("config_product_exception")
}

model ProductTotalSales {
  id         String   @id @default(uuid()) @map("_id")
  product    Product  @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product_id String
  date       DateTime
  amount     Int

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([product_id, date])
  @@map("product_total_sales")
}

model PriceTable {
  id           String    @id @default(uuid()) @map("_id")
  company      Company?  @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  company_id   String
  description  String
  initial_date DateTime? @default(now())
  final_date   DateTime?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt

  products ProductPricesTable[]

  @@map("price_table")
}

model ProductPricesTable {
  id              String      @id @default(uuid()) @map("_id")
  price_table     PriceTable? @relation(fields: [price_table_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  price_table_id  String
  product         Product?    @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product_id      String
  value           Float
  value_promotion Float

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("product_price_table")
}

enum SaleStatus {
  NEW
  ABANDONED
  CHECKOUT
  PAY
  FAILURE
  FINISHED

  @@map("status_venda")
}

model Sale {
  id                  String         @id @default(uuid()) @map("_id")
  company             Company?       @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  company_id          String
  user                User?          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id             String
  session             String?
  status              SaleStatus     @default(NEW)
  name                String
  last_name           String
  cellphone           String
  email               String
  cep                 String
  state               String
  city                String
  address             String
  address_number      String?
  address_complement  String?
  subtotal            Float
  descount_voucher    String?
  descount_percentage Float?
  descount_value      Float?
  total               Float
  items               ItemSales[]
  history             SalesHistory[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("sale")
}

model SalesHistory {
  id       String @id @default(uuid()) @map("_id")
  sale     Sale   @relation(fields: [sale_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sale_id  String
  historic String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("sales_history")
}

enum Sex {
  MALE
  FEMALE
  OTHERS

  @@map("sex")
}

enum Role {
  USER
  ADMIN
}

model User {
  id                 String    @id @default(uuid()) @map("_id")
  company            Company?  @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  company_id         String
  document           String?   @unique
  name               String
  last_name          String
  sex_type           Sex?      @default(OTHERS)
  birth_date         DateTime?
  celphone           String?
  email              String    @unique
  cep                String?
  state              String?
  city               String?
  neighborhood       String?
  address            String?
  address_number     String?
  address_complement String?
  sale               Sale[]
  role               Role      @default(USER)
  active             Boolean?  @default(true)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("users")
}
